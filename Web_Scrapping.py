# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bbmLUiUql2GmBBkS8PFOCV8GekmZNalg
"""



import requests
from bs4 import BeautifulSoup
import pandas as pd

# Define the base URL of the British Airways reviews page on Airline Quality
url_base = 'https://www.airlinequality.com/airline-reviews/british-airways/page/'

# Set the number of pages to scrape
num_pages = 100

# Create an empty list to store all the reviews
reviews = []

# Loop through each page and extract the reviews
for page in range(1, num_pages+1):
    # Define the URL of the current page
    url = url_base + str(page)
    
    # Send a GET request to the URL and parse the HTML with BeautifulSoup
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    
    # Find all the review elements on the page
    review_elements = soup.find_all('div', {'class': 'body'})
    
    # Extract the text content of each review and add it to the reviews list
    for element in review_elements:
        review_text = element.find('div', {'class': 'text_content'})
        if review_text is not None:
            reviews.append(review_text.text.strip())

# Create a dataframe of the reviews
df = pd.DataFrame(reviews, columns=['Review'])

# Print the dataframe
print(df)

import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from bs4 import BeautifulSoup

# Create a lemmatizer object
lemmatizer = WordNetLemmatizer()

# Define a function for text preprocessing
def preprocess_text(text):
    # Convert the text data to lowercase
    text = text.lower()
    
    # Remove any HTML tags using BeautifulSoup
    text = BeautifulSoup(text, 'html.parser').get_text()
    
    # Remove any punctuation and special characters using regular expressions
    text = re.sub(r'[^\w\s]', '', text)
    
    # Remove any stop words using the nltk library
    text = [word for word in nltk.word_tokenize(text) if word not in stopwords.words('english')]
    
    # Lemmatize the words to their base form using the nltk library
    text = [lemmatizer.lemmatize(word) for word in text]
    
    # Join the words back into a string
    text = ' '.join(text)
    
    return text

df.info()

from textblob import TextBlob

# Loop through each review and perform sentiment analysis using TextBlob
for i in range(len(df)):
    review = df.loc[i, 'Review']
    sentiment = TextBlob(review).sentiment.polarity
    df.loc[i, 'Sentiment'] = sentiment

from textblob import TextBlob
import matplotlib.pyplot as plt

# Define a function for sentiment analysis using TextBlob
def analyze_sentiment(text):
    # Perform sentiment analysis using TextBlob
    sentiment = TextBlob(text).sentiment.polarity
    
    # Return the sentiment value
    return sentiment

# Apply sentiment analysis to each review and store the result in a new column
df['Sentiment'] = df['Review'].apply(analyze_sentiment)

# Print the average sentiment value of all reviews
print("Average sentiment score: ", round(df['Sentiment'].mean(), 2))

# Plot a histogram of the sentiment values
plt.hist(df['Sentiment'], bins=20)
plt.title("Sentiment Analysis of British Airways Reviews")
plt.xlabel("Sentiment Score")
plt.ylabel("Number of Reviews")
plt.show()

# Calculate the mean and median sentiment scores
mean_sentiment = df['Sentiment'].mean()
median_sentiment = df['Sentiment'].median()

print("Mean sentiment score: {:.2f}".format(mean_sentiment))
print("Median sentiment score: {:.2f}".format(median_sentiment))

import matplotlib.pyplot as plt

# Plot a histogram of the sentiment scores
plt.hist(df['Sentiment'], bins=20)
plt.title('Distribution of Sentiment Scores')
plt.xlabel('Sentiment Score')
plt.ylabel('Frequency')
plt.show()

# Print the most positive and negative reviews
most_positive = df.loc[df['Sentiment'].idxmax(), 'Review']
most_negative = df.loc[df['Sentiment'].idxmin(), 'Review']

print("\nMost positive review:")
print(most_positive)

print("\nMost negative review:")
print(most_negative)

from textblob import TextBlob
import pandas as pd

# Define a function for sentiment analysis using TextBlob
def analyze_sentiment(text):
    # Perform sentiment analysis using TextBlob
    sentiment = TextBlob(text).sentiment.polarity
    
    # Return the sentiment value
    return sentiment

# Apply sentiment analysis to each review and store the result in a new column
df['Sentiment'] = df['Review'].apply(analyze_sentiment)

# Find the indices of the most positive and most negative reviews
most_positive_idx = df['Sentiment'].idxmax()
most_negative_idx = df['Sentiment'].idxmin()

# Create a new dataframe with the most positive and most negative reviews
most_reviews_df = pd.DataFrame({
    'Review': [df.loc[most_positive_idx, 'Review'], df.loc[most_negative_idx, 'Review']],
    'Sentiment': [df.loc[most_positive_idx, 'Sentiment'], df.loc[most_negative_idx, 'Sentiment']]
}, index=['Most Positive', 'Most Negative'])

# Print the new dataframe
print(most_reviews_df)

# Sort the dataframe by sentiment score
df_sorted = df.sort_values(by='Sentiment', ascending=False)

# Take the top and bottom reviews
most_positive_reviews = df_sorted.head(10)
most_negative_reviews = df_sorted.tail(10)

most_positive_reviews

most_negative_reviews

# Sort the reviews by sentiment score in descending order
df_sorted = df.sort_values(by='Sentiment', ascending=False)

# Group the reviews by sentiment score and count the number of positive and negative reviews
sentiment_counts = df_sorted.groupby(df_sorted['Sentiment'] > 0)['Review'].count()

# Print the sentiment counts
print(sentiment_counts)

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate word clouds for top 10 positive and negative reviews
df_sorted = df.sort_values(by='Sentiment', ascending=False)
top_positive_reviews = df_sorted.head(10)['Review'].tolist()
top_negative_reviews = df_sorted.tail(10)['Review'].tolist()

positive_text = ' '.join(top_positive_reviews)
negative_text = ' '.join(top_negative_reviews)

positive_cloud = WordCloud(width=800, height=800, background_color='white').generate(positive_text)
negative_cloud = WordCloud(width=800, height=800, background_color='white').generate(negative_text)

# Plot the word clouds
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

ax1.imshow(positive_cloud)
ax1.axis('off')
ax1.set_title('Top 10 Positive Reviews', fontsize=16)

ax2.imshow(negative_cloud)
ax2.axis('off')
ax2.set_title('Top 10 Negative Reviews', fontsize=16)

plt.show()

